$Constant
  Средний_интервал_1        : real = 24.0
  Средний_интервал_2        : real = 2.0
  мин_диаметр_бревна        : integer = 260
  макс_диаметр_бревна       : integer = 700
  Шаг_трапспортера          : integer = 10     /* в см, шаг 5 */
  Конв_2_нормальный_шаг     : integer = 25     /* в см, шаг 5 */
  Конв_2_медленный_шаг      : integer = 5      /* в см, шаг 5 */
  Время_передачи_бревна     : real    = 0.002  /* в час */
  ПИ_координата             : integer = 1450   /* в см */
  Размер_отпил_торца        : integer = 5      /* в см, шаг 5 */
  Время_распиловки          : real    = 0.005  /* в час */
$End

$Sequence Случайно : real
$Type = uniform 7475094
$End

$Sequence Вход_1 : real
$Type = exponential 087509
$End

$Sequence Вход_2 : real
$Type = exponential 34567654
$End

$Sequence Получить_количество_в_машине_1 : integer
$Type = uniform  12345365
$End

$Sequence Получить_количество_в_машине_2 : integer
$Type = uniform  12345365
$End

$Sequence Вид_древесины_бревна : such_as Бревно.вид_древесины
$Type = by_hist  12538424
$Body
  сосна   0.8
  ель     0.2
$End

$Sequence Качество_бревна : such_as Бревно.качество
$Type = by_hist  12538424
$Body
  1   2      0.6
  2   3      0.4
$End

$Sequence Длина : integer
$Type = uniform  1234569
$End

$Function Длина_бревна : integer
$Type = algorithmic
$Parameters
  код_транспортера : such_as Бревно.код_места
$Body
  if (код_транспортера == Тр_1)  return Длина(400, 800);
  if (код_транспортера == Тр_2)  return Длина(600, 2200);
$End

$Sequence Диаметр : integer
$Type = uniform  1234563
$End

$Function Диаметр_бревна : integer
$Type = algorithmic
$Parameters
  код_транспортера : such_as Бревно.код_места
$Body
  if (код_транспортера == Тр_1)  return Диаметр(мин_диаметр_бревна , макс_диаметр_бревна);
  if (код_транспортера == Тр_2)  return Диаметр(мин_диаметр_бревна , макс_диаметр_бревна);
$End

$Function Объем_бревна : real
$Type = algorithmic
$Parameters
  длина      : integer
  диаметр_1  : integer
  диаметр_2  : integer
$Body
  if (0 == 0)
  return 0.2618 * длина / 100.0 * (диаметр_1 / 1000000.0 * диаметр_1 +
    диаметр_1 / 1000000.0 * диаметр_2 + диаметр_2 / 1000000.0 * диаметр_2);
$End

$Sequence Имя_клиента : such_as Позиция_заказа.имя_клиента
$Type = by_hist  12774424
$Body
   Бронштейн      1.0
   Шниперсон      1.0
   Крузенштерн    1.0
   М_фон_Судов    1.0
$End

$Sequence Количество_заказов : integer
$Type = uniform  12538424
$End

$Sequence Дата_выполнения_заказа  : integer
$Type = uniform  19424
$End

$Sequence Длина_пиломатериала : integer
$Type = uniform  12538424
$End

$Sequence Типоразмер_пиломатериала  : such_as Позиция_заказа.типоразмер
$Type = by_hist  12538424
$Body
  _60x60           1.0
  _60x80           1.0
  _60x120          1.0
  _80x80           3.0
  _80x100          3.0
  _80x120          3.0
  _100x100         3.0
  _100x120         3.0
  _120x120         3.0
  _120x140         3.0
  _120x160         3.0
  _140x140         1.0
  _140x160         3.0
  _160x160         1.0
  _160x180         3.0
  _100x200         1.0
  _100x220         1.0
  _120x200         1.0
  _120x240         1.0
  _160x200         1.0
  _180x220         1.0
  _200x200         1.0
  _200x240         3.0
$End

$Function Размеры_пиломатериала : integer
$Type = table
$Parameters
  dimension : (_ширина, _высота)
  _типоразмер : such_as Позиция_заказа.типоразмер
$Body
  /*   _60x60 */      60    60
  /*   _60x80 */      60    80
  /*  _60x120 */      60   120
  /*   _80x80 */      80    80
  /*  _80x100 */      80   100
  /*  _80x120 */      80   120
  /* _100x100 */     100   100
  /* _100x120 */     100   120
  /* _120x120 */     120   120
  /* _120x140 */     120   140
  /* _120x160 */     120   160
  /* _140x140 */     140   140
  /* _140x160 */     140   160
  /* _160x160 */     160   160
  /* _160x180 */     160   180
  /* _100x200 */     100   200
  /* _100x220 */     100   220
  /* _120x200 */     120   200
  /* _120x240 */     120   240
  /* _160x200 */     160   200
  /* _180x220 */     180   220
  /* _200x200 */     200   200
  /* _200x240 */     200   240
$End

$Sequence Вид_древесины_заказа : such_as Бревно.вид_древесины
$Type = by_hist  312538
$Body
  сосна   0.8
  ель     0.2
$End

$Sequence Класс_заказа : such_as Позиция_заказа.класс
$Type = by_hist  7546512
$Body
  S          0.6
  A          0.2
  B          0.1
  C          0.1
$End

$Sequence Качество_заказа : such_as Бревно.качество
$Type = by_hist  7751253
$Body
  1   2      0.6
  2   3      0.4
$End

$Sequence Приоритет_заказа : integer
$Type = uniform  538422
$End

$Function Конв_шаг : integer
$Type = algorithmic
$Parameters
  код       : such_as Бревно.код_места
$Body
  if (код == Тр_1)  return Шаг_трапспортера;
  if (код == Тр_2)  return Шаг_трапспортера;
  if (код == Тр_3)  return Шаг_трапспортера;
  if (код == Кн_1)  return Конвейер_1.шаг;
  if (код == Кн_2)  return Конвейер_2.шаг;
  if (код == Кн_3)  return Конвейер_3.шаг;
  if (код == Кн_4)  return Конвейер_4.шаг;
  if (код == Кн_5)  return Конвейер_5.шаг;
$End

$Function Общая_длина : integer
$Type = algorithmic
$Parameters
  код       : such_as Бревно.код_места
$Body
  if (код == Тр_1)  return Транспортер_1.длина;
  if (код == Тр_2)  return Транспортер_2.длина;
  if (код == Тр_3)  return Транспортер_3.длина;
  if (код == Кн_1)  return Конвейер_1.длина;
  if (код == Кн_2)  return Конвейер_2.длина;
  if (код == Кн_3)  return Конвейер_3.длина;
  if (код == Кн_4)  return Конвейер_4.длина;
  if (код == Кн_5)  return Конвейер_5.длина;
$End

$Function Новый_счетчик_оборотов : integer
$Type = algorithmic
$Parameters
  направление  : such_as Конвейер.статус
  позиция      : integer
  код          : such_as Бревно.код_места
$Body
  if (направление == вперед and позиция - Конв_шаг(код) < 0)
    return 1;
  if (направление == вперед and позиция - Конв_шаг(код) >= 0)
    return 0;
  if (направление == назад and позиция + Конв_шаг(код) < Общая_длина(код))
    return 0;
  if (направление == назад and позиция + Конв_шаг(код) >= Общая_длина(код))
    return -1;
$End

$Function Новая_позиция : integer
$Type = algorithmic
$Parameters
  направление  : such_as Конвейер.статус
  позиция      : integer
  код          : such_as Бревно.код_места
$Body
  if (направление == вперед and позиция - Конв_шаг(код) < 0)
    return позиция - Конв_шаг(код) + Общая_длина(код);
  if (направление == вперед and позиция - Конв_шаг(код) >= 0)
    return позиция - Конв_шаг(код);
  if (направление == назад and позиция + Конв_шаг(код) < Общая_длина(код))
    return позиция + Конв_шаг(код);
  if (направление == назад and позиция + Конв_шаг(код) >= Общая_длина(код))
    return позиция + Конв_шаг(код) - Общая_длина(код);
$End

$Function Новый_счетчик_оборотов_бревно : integer
$Type = algorithmic
$Parameters
  позиция         : integer
  длина_пилоблока : integer
  длина           : integer
$Body
  if (позиция - длина_пилоблока >= 0)  return 0;
  if (позиция - длина_пилоблока  < 0)  return 1;
$End

$Function Новая_позиция_бревно : integer
$Type = algorithmic
$Parameters
  позиция         : integer
  длина_пилоблока : integer
  длина           : integer
$Body
  if (позиция - длина_пилоблока >= 0)
    return позиция - длина_пилоблока;
  if (позиция - длина_пилоблока  < 0)
    return позиция - длина_пилоблока + длина;
$End

$Function X_поз_Ф1 : integer
$Type = algorithmic
$Parameters
  код              : such_as Бревно.код_места
  позиция          : integer
  счетчик_оборотов : integer
$Body
  if (код == Тр_3)  return 78;
  if (код == Кн_1)
    return 440+(50 + Конвейер_1.позиция - позиция -
      (Конвейер_1.счетчик_оборотов - счетчик_оборотов - 1) * Конвейер_1.длина) / 10;
  if (код == Кн_2)
    return 70+(1000 + 50 + Конвейер_2.позиция - позиция -
      (Конвейер_2.счетчик_оборотов - счетчик_оборотов - 1) * Конвейер_2.длина) / 10;
  if (код == Кн_3)
    return 60+(50 + Конвейер_3.позиция - позиция -
      (Конвейер_3.счетчик_оборотов - счетчик_оборотов - 1) * Конвейер_3.длина) / 10;
  if (код == Кн_4)
    return 60-(Конвейер_4.позиция - позиция - 50 -
      (Конвейер_4.счетчик_оборотов - счетчик_оборотов) * Конвейер_4.длина) / 10;
  if (код == Кн_5)
    return 80-(Конвейер_5.позиция - позиция - 50 - 1000 -
      (Конвейер_5.счетчик_оборотов - счетчик_оборотов) * Конвейер_5.длина) / 10;
$End

$Function Y_поз_Ф1 : integer
$Type = algorithmic
$Parameters
  код              : such_as Бревно.код_места
  позиция          : integer
  счетчик_оборотов : integer
$Body
  if (код == Тр_3)
	 return 140 + (Транспортер_3.позиция - позиция - 1 -
		(Транспортер_3.счетчик_оборотов - счетчик_оборотов - 1) * Транспортер_3.длина) / 5;
  if (код == Кн_1)  return 381;
  if (код == Кн_2)  return 381;
  if (код == Кн_3)  return 381;
  if (код == Кн_4)  return 140;
  if (код == Кн_5)  return 140;
$End

$Function X_поз_Ф2 : integer
$Type = algorithmic
$Parameters
  код              : such_as Бревно.код_места
  позиция          : integer
  счетчик_оборотов : integer
$Body
  if (код == Тр_3)  return 78;
  if (код == Кн_1)  return 0;
  if (код == Кн_2)  return 0;
  if (код == Кн_3)  return 0;
  if (код == Кн_4)
    return 60-(Конвейер_4.позиция - позиция - 50 -
      (Конвейер_4.счетчик_оборотов - счетчик_оборотов) * Конвейер_4.длина) / 10;
  if (код == Кн_5)
    return 80-(Конвейер_5.позиция - позиция - 50 - 1000 -
      (Конвейер_5.счетчик_оборотов - счетчик_оборотов) * Конвейер_5.длина) / 10;
$End

$Function Y_поз_Ф2 : integer
$Type = algorithmic
$Parameters
  код              : such_as Бревно.код_места
  позиция          : integer
  счетчик_оборотов : integer
$Body
  if (код == Тр_3)
    return 220 + (Транспортер_3.позиция - позиция - 1 -
      (Транспортер_3.счетчик_оборотов - счетчик_оборотов - 1) * Транспортер_3.длина) / 5;
  if (код == Кн_1)  return 0;
  if (код == Кн_2)  return 0;
  if (код == Кн_3)  return 0;
  if (код == Кн_4)  return 182;
  if (код == Кн_5)  return 182;
$End

$Function Получить_расстояние_склада: integer
$Type = algorithmic
$Parameters
  код_места    : such_as Бревно.код_места
$Body
  if (код_места == Ск_1)   return Склад_1.расстояние;
  if (код_места == Ск_2)   return Склад_2.расстояние;
  if (код_места == Ск_3)   return Склад_3.расстояние;
  if (код_места == Ск_4)   return Склад_4.расстояние;
  if (код_места == Ск_5)   return Склад_5.расстояние;
  if (код_места == Ск_6)   return Склад_6.расстояние;
  if (код_места == Ск_7)   return Склад_7.расстояние;
  if (код_места == Ск_8)   return Склад_8.расстояние;
  if (код_места == Ск_9)   return Склад_9.расстояние;
  if (код_места == Ск_10)  return Склад_10.расстояние;
  if (код_места == Ск_11)  return Склад_11.расстояние;
  if (код_места == Ск_12)  return Склад_12.расстояние;
  if (код_места == Ск_13)  return Склад_13.расстояние;
  if (код_места == Ск_14)  return Склад_14.расстояние;
  if (код_места == Ск_15)  return Склад_15.расстояние;
  if (код_места == Ск_16)  return Склад_16.расстояние;
  if (код_места == Ск_17)  return Склад_17.расстояние;
  if (код_места == Ск_18)  return Склад_18.расстояние;
  if (код_места == Ск_19)  return Склад_19.расстояние;
  if (код_места == Ск_20)  return Склад_20.расстояние;
  if (код_места == Ск_21)  return Склад_21.расстояние;
  if (код_места == Ск_22)  return Склад_22.расстояние;
  if (код_места == Ск_23)  return Склад_23.расстояние;
  if (код_места == Ск_24)  return Склад_24.расстояние;
  if (код_места == Ск_25)  return Склад_25.расстояние;
  if (код_места == Ск_26)  return Склад_26.расстояние;
  if (код_места == Ск_27)  return Склад_27.расстояние;
  if (код_места == Ск_28)  return Склад_28.расстояние;
  if (код_места == Ск_29)  return Склад_29.расстояние;
  if (код_места == Ск_30)  return Склад_30.расстояние;
$End

$Function Новая_длина : integer
$Type = algorithmic
$Parameters
  код             : such_as Бревно.код_места
  состояние       : such_as Позиция_измерения.состояние
  старое_значение : integer
$Body
  if (код == Кн_2 and состояние == занят)   return старое_значение + Конвейер_2.шаг;
  if (код <> Кн_2 or состояние <> занят)  return старое_значение;
$End

$Function Новый_диаметр_к : integer
$Type = algorithmic
$Parameters
  код             : such_as Бревно.код_места
  состояние       : such_as Позиция_измерения.состояние
  старое_значение : integer
$Body
  if (код == Кн_2 and состояние == занят)
    return Позиция_измерения_1.диаметр_н - Позиция_измерения_1.длина * 10 / 100;
  if (код <> Кн_2 or состояние <> занят)  return старое_значение;
$End

$Function Диаметр_класса : real
$Type = algorithmic
$Parameters
  размер_1     : integer
  размер_2     : integer
  класс        : such_as Позиция_заказа.класс
$Body
  if (класс == S)  return (размер_1 + размер_2) * 0.7 + IAbs(размер_1 - размер_2) / 10.0;
  if (класс == A)  return (размер_1 + размер_2) * 0.7;
  if (класс == B)  return (размер_1 + размер_2) * 0.6;
  if (класс == C)  return IMax(размер_1, размер_2) + 3.0;
$End

$Function Требуемый_диаметр : real
$Type = algorithmic
$Parameters
  типоразмер     : such_as Позиция_заказа.типоразмер
  класс          : such_as Позиция_заказа.класс
  кол_пилоблоков : integer [1..9]
$Body
  if (кол_пилоблоков == 1)  return
    Диаметр_класса(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер), класс);
  if (кол_пилоблоков == 2)  return
    Диаметр_класса(IMin(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер)) * 2,
                   IMax(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер)), класс);
  if (кол_пилоблоков == 3)  return
    Диаметр_класса(IMin(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер)) * 3,
                   IMax(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер)), класс);
  if (кол_пилоблоков == 4)  return
    Диаметр_класса(Размеры_пиломатериала(_ширина, типоразмер) * 2,
                   Размеры_пиломатериала(_высота, типоразмер) * 2, класс);
  if (кол_пилоблоков == 5 or кол_пилоблоков == 6) return
    Диаметр_класса(IMin(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер)) * 3,
                   IMax(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер)) * 2, класс);
  if (кол_пилоблоков == 7 or кол_пилоблоков == 8) return
    Диаметр_класса(IMin(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер)) * 4,
                   IMax(Размеры_пиломатериала(_ширина, типоразмер), Размеры_пиломатериала(_высота, типоразмер)) * 2, класс);
  if (кол_пилоблоков == 9)  return
    Диаметр_класса(Размеры_пиломатериала(_ширина, типоразмер) * 3,
                   Размеры_пиломатериала(_высота, типоразмер) * 3, класс);
$End

$Function Получить_кол_брусьев : integer [0..9]
$Type = algorithmic
$Parameters
  типоразмер  : such_as Позиция_заказа.типоразмер
  класс       : such_as Позиция_заказа.класс
  диаметр     : real
$Body
  if (диаметр <  Требуемый_диаметр(типоразмер, класс, 1))  return 0;
  if (диаметр >= Требуемый_диаметр(типоразмер, класс, 9))  return 9;
  if (диаметр >= Требуемый_диаметр(типоразмер, класс, 8))  return 8;
  if (диаметр >= Требуемый_диаметр(типоразмер, класс, 6))  return 6;
  if (диаметр >= Требуемый_диаметр(типоразмер, класс, 4))  return 4;
  if (диаметр >= Требуемый_диаметр(типоразмер, класс, 3))  return 3;
  if (диаметр >= Требуемый_диаметр(типоразмер, класс, 2))  return 2;
  if (диаметр >= Требуемый_диаметр(типоразмер, класс, 1))  return 1;
$End

